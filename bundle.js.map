{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game.js","webpack:///./src/ghost.js","webpack:///./src/index.js","webpack:///./src/pacman.js","webpack:///./src/walls.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,cAAc,mBAAO,CAAC,+BAAS;AAC/B,eAAe,mBAAO,CAAC,iCAAU;AACjC,cAAc,mBAAO,CAAC,+BAAS;AAC/B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8BAA8B,sBAAsB;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,sB;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;AC/HA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,oBAAoB;AACpB,qBAAqB;AACrB;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;;AAGL,CAAC;;;;;;AAMD;;;;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;;AAGA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AChOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,6DAA6D;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const Walls = require('./walls');\nconst Pacman = require('./pacman');\nconst Ghost = require('./ghost');\n// this.x = 285;\n\n// this.y = 300;\n\nclass Game {\n    constructor(canvas, ctx, map) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.map = map;\n        this.walls = new Walls(ctx, this.map);\n        this.pacman = new Pacman(ctx, this.map);\n        // this.shadowGhost = new Ghost(ctx, this.map, 285,300,'purple');\n        // this.speedyGhost = new Ghost(ctx, this.map, 285, 290, 'pink');\n        // this.bashfulGhost = new Ghost(ctx, this.map, 280,310,'cyan');\n        // this.pokeyGhost = new Ghost(ctx, this.map, 284,320,'orange');\n        this.ghosts = [];\n        this.winner = false;\n        this.loser = false;\n        this.started = false;\n        this.createGhosts();\n\n        \n    }\n\n    createGhosts() {\n        this.ghosts[0] = new Ghost(this.ctx, this.map, 285, 300, 'red');\n        this.ghosts[1] = new Ghost(this.ctx, this.map, 285, 290, 'pink');\n        this.ghosts[2] = new Ghost(this.ctx, this.map, 280, 310, 'yellow');\n        this.ghosts[3] = new Ghost(this.ctx, this.map, 284, 320, 'lightblue');\n    }\n\n    captured() {\n        let caught = false;\n         this.ghosts.forEach((ghost) => {\n             if (ghost.color !== 'blue') {\n                 if (this.pacman.x <= ghost.x + 20 &&\n                     this.pacman.x >= ghost.x - 20 && this.pacman.y <= ghost.y + 20 &&\n                     this.pacman.y >= ghost.y - 20) {\n                     caught = true;\n                 }\n             } else {\n                 if (this.pacman.x <= ghost.x + 20 &&\n                     this.pacman.x >= ghost.x - 20 && this.pacman.y <= ghost.y + 20 &&\n                     this.pacman.y >= ghost.y - 20) {\n                     ghost.x = 285;\n                     ghost.y = 300;\n                 }\n             }\n         });\n         return caught;\n    }\n\n    gameOver() {\n        if (this.pacman.pillCount === 0 || this.captured()) {\n            // console.log('ate all the pills');\n            // console.log('hellowalsfk')\n            this.winner = true;\n            return true;\n        } else {\n            // console.log(`${this.pacman.pillCount} pills remaining`)\n        }\n    }\n\n    display() {\n        let pregame = document.getElementById('pregame');\n        let endGame = document.getElementById('gameover');\n        let gameBoard = document.getElementById('canvas')\n        if (this.started === false) {\n            pregame.style.display = 'block';\n        } else {\n            pregame.style.display = 'none';\n             if (this.gameOver()) {\n                 endGame.style.display = 'block';\n                 gameBoard.style.display = 'none';\n             } \n            //  else {\n            //     //  console.log(this.started);\n            //      this.walls.render();\n            //      this.pacman.draw();\n            //     //  this.shadowGhost.draw();\n            //     //  this.speedyGhost.draw();\n            //     //  this.pokeyGhost.draw();\n            //     //  this.bashfulGhost.draw();\n            //     this.ghosts.forEach(ghost => {\n            //         if (this.pacman.power) {\n            //             ghost.color = 'blue';\n            //             ghost.speed = .75;\n            //         } else {\n            //             ghost.reset();\n            //             ghost.speed = 1;\n            //         }\n            //         ghost.draw()\n            //     });\n\n            //  }\n        }\n      \n    }\n\n    play() {\n       const animate = () => {\n           this.walls.render();\n           this.pacman.draw();\n           //  this.shadowGhost.draw();\n           //  this.speedyGhost.draw();\n           //  this.pokeyGhost.draw();\n           //  this.bashfulGhost.draw();\n           this.ghosts.forEach(ghost => {\n               if (this.pacman.power) {\n                   ghost.color = 'blue';\n                   ghost.speed = .75;\n               } else {\n                   ghost.reset();\n                   ghost.speed = 1;\n               }\n               ghost.draw()\n           });\n           this.frame = requestAnimationFrame(animate);\n           this.display();\n           \n       }\n\n       animate();\n    }\n}\n\nmodule.exports = Game;","\n\nclass Ghost {\n    constructor(ctx, map,x,y,color) {\n        this.ctx = ctx;\n        this.map = map;\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.resetColor = this.color;\n        this.direction = \"none\";\n        this.prevDirection = \"none\";\n        this.speed = 1;\n    }\n\n    reset() {\n        this.color = this.resetColor;\n    }\n\n    arc() {\n       this.ctx.arc(this.x, this.y, 12.5, 0, 2 * Math.PI);\n    //    this.ctx.fillStyle = this.color;\n    //    this.ctx.fill();\n    //    this.ctx.stroke();\n    }\n\n    draw() {\n        this.changeSides();\n        this.move();\n\n        const ghostImg = new Image();\n        ghostImg.src = `./images/${this.color}.png`;\n        this.ctx.drawImage(ghostImg, 0, 0, 512, 512, this.x- 15, this.y- 15, 30, 30);\n        // this.ctx.beginPath();\n        // this.arc();\n    }\n\n    randomDirection() {\n        const directions = ['left', 'right', 'up','down'];\n        this.direction = directions[Math.floor(Math.random() * 4)];\n\n        if (this.direction === this.prevDirection) {\n            this.randomDirection();\n        } else {\n            this.move();\n        }\n    }\n\n    changeSides() {\n        if (this.x <= 0) {\n            this.x = 570 - this.x;\n        } else if (this.x >= 570) {\n            this.x = this.x - 570;\n        }\n    }\n\n    checkCollision(direction) {\n        let xRow = Math.floor(this.x / 30); // coordinates\n        let yRow = Math.floor(this.y / 30);\n        let newX = this.x,\n            newY = this.y;\n\n        if (direction === \"up\") {\n            newY -= 13;\n            const top = this.collision(xRow, yRow - 1, newX, newY);\n            const left = this.collision(xRow - 1, yRow - 1, newX - 10, newY);\n            const right = this.collision(xRow + 1, yRow - 1, newX + 10, newY);\n            return top || left || right;\n        } else if (direction === \"down\") {\n            newY += 13;\n            const down = this.collision(xRow, yRow + 1, newX, newY);\n            const left = this.collision(xRow - 1, yRow + 1, newX - 10, newY);\n            const right = this.collision(xRow + 1, yRow + 1, newX + 10, newY);\n            return down || left || right;\n        } else if (direction === \"left\") {\n            newX -= 13;\n            const left = this.collision(xRow - 1, yRow, newX, newY);\n            const top = this.collision(xRow - 1, yRow - 1, newX, newY - 10);\n            const down = this.collision(xRow - 1, yRow + 1, newX, newY + 10);\n            return left || top || down;\n        } else if (direction === \"right\") {\n            newX += 13;\n            const right = this.collision(xRow + 1, yRow, newX, newY);\n            const top = this.collision(xRow + 1, yRow - 1, newX, newY - 10);\n            const down = this.collision(xRow + 1, yRow + 1, newX, newY + 10);\n            return right || top || down;\n        }\n    }\n\n\n    inBlock(dx, dy, x, y) {\n        if (x >= dx && x <= dx + 30 && y >= dy && y <= dy + 30) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    collision(xRow, yRow, newX, newY) {\n        if (this.map[yRow][xRow] === 1 && this.inBlock(xRow * 30, yRow * 30, newX, newY)) {\n            return true;\n        } else if (this.map[yRow][xRow] === 4 && this.inBlock(xRow * 30, yRow * 30, newX, newY)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    move() {\n        if (this.direction === \"none\" || this.checkCollision(this.direction)) {\n            this.randomDirection();\n        } else if (this.direction === \"up\") {\n            // this.prevDirection = \"down\";\n            this.y -= this.speed;\n        } else if (this.direction === \"down\") {\n            // this.prevDirection = \"up\";\n            this.y += this.speed;\n        } else if (this.direction === \"right\") {\n            // this.prevDirection = \"left\";\n            this.x += this.speed;\n        } else if (this.direction === \"left\") {\n            // this.prevDirection = \"right\";\n            this.x -= this.speed;\n        }\n    }\n}\n\nmodule.exports = Ghost;","const Game = require('./game');\nconst Pacman = require('./pacman');\n\n// pillcount = 147\nconst map = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    [1, 5, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 5, 1],\n    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    [1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1],\n    [1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1],\n    [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    [1, 5, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 5, 1],\n    [1, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 1],\n    [1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1],\n    [1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1],\n    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n];\n\n//pillcount = 8\n//1 wall \n//0 free\nconst testMap = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],\n    [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1],\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n];\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvasEl = document.getElementById(\"canvas\");\n    var WIDTH = 570; // 19 cols * 30\n    var HEIGHT = 660; // 22 rows * 30\n    canvasEl.height = HEIGHT;\n    canvasEl.width = WIDTH;\n    const ctx = canvasEl.getContext('2d');\n    \n\n    const game = new Game(canvasEl,ctx, map);\n\n    document.onkeydown = function (e) {\n        //ascii values => a = 65\n        if (e.which == 37) {\n            e.preventDefault();\n            //left\n            if (!game.pacman.checkCollision('left')) {\n                game.pacman.direction = 'left';\n                game.pacman.xdir -= 30;\n            } \n            // console.log('left');\n            // console.log(game.pacman.x);\n        } else if (e.which == 38) {\n            e.preventDefault();\n            //up\n            if (!game.pacman.checkCollision('up')) {\n                game.pacman.direction = 'up';\n                game.pacman.ydir -= 30;\n\n            }\n            // console.log('up');\n        } else if (e.which == 39) {\n            e.preventDefault();\n            // right\n            if(!game.pacman.checkCollision('right')) {\n                game.pacman.direction = 'right';\n                game.pacman.xdir += 30;\n\n            }\n            // console.log('right');\n\n        } else if (e.which == 40) {\n            e.preventDefault();\n            // down\n            if(!game.pacman.checkCollision('down')) {\n                game.pacman.direction = 'down';\n                game.pacman.ydir += 30;\n            }\n            // console.log('down');\n        }\n    }\n    game.display();\n    \n    document.getElementById(\"start\").addEventListener(\"click\", () => { \n      if (game.started === false) {\n          game.started = true;\n          game.play();\n      } else {\n          document.location.reload();\n          console.log(game.started);\n      }\n    });\n    \n    \n})\n\n\n\n\n\n// console.log('webpack is working');\n \n\n","class Pacman {\n    constructor(ctx, map) {\n        this.ctx = ctx;\n        this.x = 285;\n        this.y = 375;\n        this.direction = false;\n        this.map = map;\n        this.pillCount = 147;\n        this.open = false;\n        this.power = false;\n        setInterval(() => {\n            if (this.open) {\n                this.open = false;\n            } else {\n                this.open = true;\n            }\n        }, 150);\n    // this.map = [\n    //     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    //     [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    //     [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],\n    //     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    //     [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],\n    //     [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n    //     [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1],\n    //     [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    //     [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    //     [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    //     [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    //     [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    //     [1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1],\n    //     [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //     [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    //     [1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1],\n    //     [1, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 1],\n    //     [1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1],\n    //     [1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1],\n    //     [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    // ];\n        \n    }\n\n   \n    // powerPill() {\n    //     setInterval(() => {\n\n    //     })\n    // }\n    pillPower() {\n        // turn ghosts blue & reset color every 10 seconds\n        this.power = true;\n        return setTimeout(() => {\n            return this.power = false;\n        }, 10000);\n        \n    }\n\n    arc() {\n        let sAngle;\n        let eAngle;\n        let saAngle = sAngle = (Math.PI / 180) * 30;\n        let eaAngle = eAngle = (Math.PI / 180) * (360 - 30);\n        if (this.direction === 'left') {\n           if (this.open) {\n              sAngle = 1.25 * Math.PI;\n              eAngle = 0.75 * Math.PI;\n           } else {\n              sAngle = Math.PI;\n              eAngle = 0.999 * Math.PI;\n           }\n           \n            \n        } else if (this.direction === 'right' || this.direction === false) {\n            if (this.open) {\n               sAngle = (Math.PI / 180) * 30;\n               eAngle = (Math.PI / 180) * (360 - 30);\n            } else {\n                sAngle = 0;\n                eAngle = 2 * Math.PI;\n                // this.ctx.moveTo(this.x, this.y - 12.5);\n                // this.ctx.lineTo(this.x, this.y);\n            };\n        } else if (this.direction === 'down') {\n            if (this.open) {\n               sAngle = 0.75 * Math.PI;\n               eAngle = 0.25 * Math.PI;\n            } else {\n                sAngle = .5 * Math.PI;\n                eAngle =  0.49* Math.PI;\n                // this.ctx.lineTo(this.x, this.y);\n            }\n            \n        } else if (this.direction === 'up') {\n            if (this.open) {\n                sAngle = (7 / 4) * Math.PI;\n                eAngle = (5/4) * Math.PI;\n            } else {\n                sAngle = (3/2) * Math.PI;\n                eAngle = 1.49 * Math.PI;\n            }\n            \n        }\n        // this.ctx.arc(this.x, this.y, 12.5,\n        //     (Math.PI / 180) * 30,\n        //     (Math.PI / 180) * (360 - 30));\n        if (this.open) {\n            // setInterval(() => this.open = false, 2000);\n            \n            this.ctx.arc(this.x, this.y, 15, sAngle, eAngle);\n        } else {\n            // this.open = true;\n            \n            this.ctx.arc(this.x, this.y, 15, sAngle, eAngle);\n        }\n        \n    }\n\n    checkCollision(direction) {\n        let xAxis = Math.floor(this.x / 30);\n        let yAxis = Math.floor(this.y / 30);\n        let nextX = this.x\n        let nextY = this.y;\n\n        if (direction === \"up\") {\n            nextY -= 15;\n            const top = this.collision(xAxis, yAxis - 1, nextX, nextY);\n            const left = this.collision(xAxis - 1, yAxis - 1, nextX - 11.5, nextY);\n            const right = this.collision(xAxis + 1, yAxis - 1, nextX + 11.5, nextY);\n            return top || left || right; //check collision in each direction\n        } else if (direction === \"down\") {\n            nextY += 15;\n            const down = this.collision(xAxis, yAxis + 1, nextX, nextY);\n            const left = this.collision(xAxis - 1, yAxis + 1, nextX - 11.5, nextY);\n            const right = this.collision(xAxis + 1, yAxis + 1, nextX + 11.5, nextY);\n            return down || left || right;\n        } else if (direction === \"left\") {\n            nextX -= 15;\n            const left = this.collision(xAxis - 1, yAxis, nextX, nextY);\n            const top = this.collision(xAxis - 1, yAxis - 1, nextX, nextY - 11.5);\n            const down = this.collision(xAxis - 1, yAxis + 1, nextX, nextY + 11.5);\n            return left || top || down;\n        } else if (direction === \"right\") {\n            nextX += 15;\n            const right = this.collision(xAxis + 1, yAxis, nextX, nextY);\n            const top = this.collision(xAxis + 1, yAxis - 1, nextX, nextY - 11.5);\n            const down = this.collision(xAxis + 1, yAxis + 1, nextX, nextY + 11.5);\n            return right || top || down;\n        }\n    }\n\n    solidDetect(dx, dy, x, y) {\n        if (x >= dx && x <= dx + 30 && y >= dy && y <= dy + 30) {\n            // console.log(true);\n            // console.log(this.pillCount);\n            return true;\n        } else {\n            // console.log(false);\n            return false;\n        }\n    }\n\n    collision(xAxis, yAxis, nextX, nextY) {\n        if (this.map[yAxis][xAxis] === 1 && this.solidDetect(xAxis * 30, yAxis * 30, nextX, nextY)) {\n            //check walls\n            // console.log('wall collission');\n            return true;\n        } else if (this.map[yAxis][xAxis] === 3 && this.solidDetect(xAxis * 30, yAxis * 30, nextX, nextY)) {\n            //check pills\n            // console.log(\"pill collision\");\n            this.map[yAxis][xAxis] = 0;\n            this.pillCount -= 1;\n            // console.log(this.pillCount);\n        } else if (this.map[yAxis][xAxis] === 5 && this.solidDetect(xAxis * 30, yAxis * 30, nextX, nextY)) {\n            this.map[yAxis][xAxis] = 0;\n            this.pillCount -= 1;\n            this.pillPower();\n        } else {\n            return false;\n        }\n    }\n\n    escapeSide() {\n        if (this.x <= 0) {\n            this.x = 570 - this.x;\n        } else if (this.x >= 570) {\n            this.x = this.x - 570;\n        }\n    }\n\n    draw() {\n        // console.log(this.power);\n        this.escapeSide();\n        this.move();\n        this.ctx.beginPath();\n        this.arc();\n\n        //mouth\n        // this.ctx.moveTo(this.x,this.y-12.5);\n        \n        this.ctx.lineTo(this.x, this.y);\n\n        //fill pacman shape with fillstyle\n        this.ctx.fillStyle = 'yellow';\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    move() {\n        if (this.checkCollision(this.direction)) {\n            return this.direction;\n        } else if (this.direction === \"up\") {\n            this.y -= 1.5;\n        } else if (this.direction === \"down\") {\n            this.y += 1.5;\n        } else if (this.direction === \"left\") {\n            this.x -= 1.5;\n        } else if (this.direction === \"right\") {\n            this.x += 1.5;\n        }\n    }\n}\n\nmodule.exports = Pacman;\n\n","class Walls {\n  constructor(ctx, map) {\n    this.ctx = ctx;\n    this.map = map;\n    // this.map = [\n    //   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    //   [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //   [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    //   [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    //   [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //   [1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1],\n    //   [1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1],\n    //   [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1],\n    //   [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    //   [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    //   [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    //   [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\n    //   [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],\n    //   [1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1],\n    //   [1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //   [1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1],\n    //   [1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1],\n    //   [1, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 1],\n    //   [1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1],\n    //   [1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1],\n    //   [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n    //   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    // ]; // 19 * 22\n\n  }\n\n  createBackground() {\n    this.ctx.beginPath();\n    this.ctx.rect(3, 3, 660, 660);\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fill();\n    this.ctx.stroke();\n  }\n\n  clearWalls() {\n    this.ctx.beginPath();\n    this.ctx.clearRect(0, 0, 660, 660);\n    this.ctx.stroke();\n  }\n\n  createWalls() {\n    // this.ctx.fillStyle = \"red\";\n    this.map.forEach((row, i) => {\n      row.forEach((gridPoint, j) => {\n        if (gridPoint === 1) {\n          this.ctx.beginPath();\n          this.ctx.fillStyle = 'red'\n          this.ctx.rect(j * 30, i * 30, 30, 30); //x,y, width, height\n          this.ctx.stroke();\n          this.ctx.fill();\n        }\n        if (gridPoint === 3) {\n          this.ctx.beginPath();\n          this.ctx.fillStyle = 'orange';\n          this.ctx.arc((j * 30) + 15, (i * 30) + 15, 2.5, 0, 2 * Math.PI);\n          this.ctx.fill();\n        }\n\n        if (gridPoint === 5) {\n           this.ctx.beginPath();\n           this.ctx.fillStyle = 'orange';\n           this.ctx.arc((j * 30) + 15, (i * 30) + 15, 5, 0, 2 * Math.PI);\n           this.ctx.fill();\n        }\n\n      });\n    });\n  }\n\n  // endGame() {\n  //   this.createWalls();\n  //   this.ctx.fillStyle = 'white';\n  //   this.ctx.font = \"39px Georgia\";\n  //   this.ctx.fillText(\"Congratulations you won!\", 80, 330); //text, pos\n  //   // this.ctx.strokeText(\"Pacman loading....\", 50, 100); //hollow text\n  // }\n\n  render() {\n      this.clearWalls();\n      this.createBackground();\n      this.createWalls();\n      // console.log(this.map.length, this.map[0].length);\n  }\n\n}\n\nmodule.exports = Walls;"],"sourceRoot":""}